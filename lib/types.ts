import { ComponentBase } from "./template-builder";
import type { State, StateSubscriber } from "./template-builder";
import type { R } from "./route";

export interface ComponentBaseInput {
  afterDestroyed: (callback: Function) => void;
  afterMounted: (callback: Function) => void;
  ref: () => () => HTMLElement | null;
  state: State;
  subscribe: StateSubscriber;
  r: R;
}

export interface Templater extends AllElements {
  component: (callback: (i: ComponentBaseInput) => any) => ComponentBase;
  custom: ElementInput;
}
export type StateSubscriptions = Map<Function, { [key: string]: Function[] }>;
type ElementInput = (...args: any) => void;

export interface AllElements {
  a: ElementInput;
  abbr: ElementInput;
  acronym: ElementInput;
  address: ElementInput;
  altGlyph: ElementInput;
  altGlyphDef: ElementInput;
  altGlyphItem: ElementInput;
  animate: ElementInput;
  animateColor: ElementInput;
  animateMotion: ElementInput;
  animateTransform: ElementInput;
  area: ElementInput;
  article: ElementInput;
  aside: ElementInput;
  audio: ElementInput;
  b: ElementInput;
  base: ElementInput;
  bdi: ElementInput;
  bdo: ElementInput;
  big: ElementInput;
  blockquote: ElementInput;
  body: ElementInput;
  br: ElementInput;
  button: ElementInput;
  canvas: ElementInput;
  caption: ElementInput;
  center: ElementInput;
  circle: ElementInput;
  cite: ElementInput;
  clipPath: ElementInput;
  code: ElementInput;
  col: ElementInput;
  colgroup: ElementInput;
  comment: ElementInput;
  custom: ElementInput;
  data: ElementInput;
  datalist: ElementInput;
  dd: ElementInput;
  defs: ElementInput;
  del: ElementInput;
  desc: ElementInput;
  details: ElementInput;
  dfn: ElementInput;
  dialog: ElementInput;
  div: ElementInput;
  dl: ElementInput;
  dt: ElementInput;
  ellipse: ElementInput;
  em: ElementInput;
  embed: ElementInput;
  feBlend: ElementInput;
  feColorMatrix: ElementInput;
  feComponentTransfer: ElementInput;
  feComposite: ElementInput;
  feConvolveMatrix: ElementInput;
  feDiffuseLighting: ElementInput;
  feDisplacementMap: ElementInput;
  feDistantLight: ElementInput;
  feDropShadow: ElementInput;
  feFlood: ElementInput;
  feFuncA: ElementInput;
  feFuncB: ElementInput;
  feFuncG: ElementInput;
  feFuncR: ElementInput;
  feGaussianBlur: ElementInput;
  feImage: ElementInput;
  feMerge: ElementInput;
  feMergeNode: ElementInput;
  feMorphology: ElementInput;
  feOffset: ElementInput;
  fePointLight: ElementInput;
  feSpecularLighting: ElementInput;
  feSpotLight: ElementInput;
  feTile: ElementInput;
  feTurbulence: ElementInput;
  fieldset: ElementInput;
  figcaption: ElementInput;
  figure: ElementInput;
  filter: ElementInput;
  font: ElementInput;
  footer: ElementInput;
  foreignObject: ElementInput;
  form: ElementInput;
  frame: ElementInput;
  frameset: ElementInput;
  g: ElementInput;
  glyphRef: ElementInput;
  h1: ElementInput;
  h2: ElementInput;
  h3: ElementInput;
  h4: ElementInput;
  h5: ElementInput;
  h6: ElementInput;
  head: ElementInput;
  header: ElementInput;
  hr: ElementInput;
  html: ElementInput;
  i: ElementInput;
  iframe: ElementInput;
  image: ElementInput;
  img: ElementInput;
  input: ElementInput;
  ins: ElementInput;
  kbd: ElementInput;
  label: ElementInput;
  legend: ElementInput;
  li: ElementInput;
  line: ElementInput;
  linearGradient: ElementInput;
  link: ElementInput;
  main: ElementInput;
  map: ElementInput;
  mark: ElementInput;
  mask: ElementInput;
  meta: ElementInput;
  metadata: ElementInput;
  meter: ElementInput;
  mpath: ElementInput;
  nav: ElementInput;
  noscript: ElementInput;
  object: ElementInput;
  ol: ElementInput;
  optgroup: ElementInput;
  option: ElementInput;
  output: ElementInput;
  p: ElementInput;
  param: ElementInput;
  path: ElementInput;
  picture: ElementInput;
  polygon: ElementInput;
  polyline: ElementInput;
  pre: ElementInput;
  progress: ElementInput;
  q: ElementInput;
  radialGradient: ElementInput;
  rb: ElementInput;
  rect: ElementInput;
  rp: ElementInput;
  rt: ElementInput;
  ruby: ElementInput;
  s: ElementInput;
  samp: ElementInput;
  script: ElementInput;
  section: ElementInput;
  select: ElementInput;
  set: ElementInput;
  small: ElementInput;
  source: ElementInput;
  span: ElementInput;
  strong: ElementInput;
  stop: ElementInput;
  style: ElementInput;
  sub: ElementInput;
  svg: ElementInput;
  switch: ElementInput;
  symbol: ElementInput;
  summary: ElementInput;
  sup: ElementInput;
  table: ElementInput;
  tbody: ElementInput;
  td: ElementInput;
  template: ElementInput;
  text: (text: string | number) => string;
  textarea: ElementInput;
  textpath: ElementInput;
  tfoot: ElementInput;
  th: ElementInput;
  thead: ElementInput;
  time: ElementInput;
  title: ElementInput;
  tr: ElementInput;
  track: ElementInput;
  tref: ElementInput;
  tspan: ElementInput;
  u: ElementInput;
  ul: ElementInput;
  use: ElementInput;
  var: ElementInput;
  video: ElementInput;
  wbr: ElementInput;
  xmp: ElementInput;
}
